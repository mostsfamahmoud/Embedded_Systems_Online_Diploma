
Lab3_ClockConfigurations.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  08000314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000314  08000314  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000314  08000314  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00010314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000318  08000318  00010318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800031c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000328  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000328  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003f7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000010c  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00020538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00020588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000b20  00000000  00000000  000205c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000122  00000000  00000000  000210e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003124  00000000  00000000  00021202  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00024326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  000243a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080002fc 	.word	0x080002fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080002fc 	.word	0x080002fc

08000170 <CLK_setConfig>:
 * Use only internal HSI_RC
 */

/* Function to configure clock settings as per lab requirements */
void CLK_setConfig()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	Set and cleared by software to select PLL clock source. This bit can be written only when
	PLL is disabled.
	0: HSI oscillator clock / 2 selected as PLL input clock
	1: HSE oscillator clock selected as PLL input clock */
	//RCC_CFGR |= 0b0 << 16;          // Method 1
	R_RCC_CFGR->field.PLLSRC = 0b0;
 8000174:	4b18      	ldr	r3, [pc, #96]	; (80001d8 <CLK_setConfig+0x68>)
 8000176:	681a      	ldr	r2, [r3, #0]
 8000178:	6813      	ldr	r3, [r2, #0]
 800017a:	f36f 4310 	bfc	r3, #16, #1
 800017e:	6013      	str	r3, [r2, #0]
	0100: PLL input clock x 6
	0101: PLL input clock x 7
	0110: PLL input clock x 8 (Required to make PLLClk 32 MHZ therefore SYSCLK becomes 32 MHZ)
	 */
	//RCC_CFGR |= 0b0110 << 18;          // Method 1
	R_RCC_CFGR->field.PLLMUL = 0b0110;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <CLK_setConfig+0x68>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	6813      	ldr	r3, [r2, #0]
 8000186:	2106      	movs	r1, #6
 8000188:	f361 4395 	bfi	r3, r1, #18, #4
 800018c:	6013      	str	r3, [r2, #0]
	Cleared by hardware when entering Stop or Standby mode. This bit can not be reset if the
	PLL clock is used as system clock or is selected to become the system clock.
	0: PLL OFF
	1: PLL ON */
	//RCC_CR |= 0b1 << 24;          // Method 1
	R_RCC_CR->field.PLLON = 0b1;
 800018e:	4b13      	ldr	r3, [pc, #76]	; (80001dc <CLK_setConfig+0x6c>)
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	6813      	ldr	r3, [r2, #0]
 8000194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000198:	6013      	str	r3, [r2, #0]
	00: HSI selected as system clock
	01: HSE selected as system clock
	10: PLL selected as system clock (Required in this Lab)
	11: not allowed */
	//RCC_CFGR |= 0b10 << 0;          // Method 1
	R_RCC_CFGR->field.SW = 0b10;      // Method 2
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <CLK_setConfig+0x68>)
 800019c:	681a      	ldr	r2, [r3, #0]
 800019e:	6813      	ldr	r3, [r2, #0]
 80001a0:	2102      	movs	r1, #2
 80001a2:	f361 0301 	bfi	r3, r1, #0, #2
 80001a6:	6013      	str	r3, [r2, #0]
	1100: SYSCLK divided by 64
	1101: SYSCLK divided by 128
	1110: SYSCLK divided by 256
	1111: SYSCLK divided by 512 */
	//RCC_CFGR |= 0b0000 << 4;          // Method 1
	R_RCC_CFGR->field.HPRE = 0b0000;    // Method 2
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <CLK_setConfig+0x68>)
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	6813      	ldr	r3, [r2, #0]
 80001ae:	f36f 1307 	bfc	r3, #4, #4
 80001b2:	6013      	str	r3, [r2, #0]
	100: HCLK divided by 2  (Required to make APB1 Bus frequency 16 MHZ)
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16 */
	//RCC_CFGR |= 0b100 << 8;           // Method 1
	R_RCC_CFGR->field.PPRE1 = 0b100;    // Method 2
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <CLK_setConfig+0x68>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	6813      	ldr	r3, [r2, #0]
 80001ba:	2104      	movs	r1, #4
 80001bc:	f361 230a 	bfi	r3, r1, #8, #3
 80001c0:	6013      	str	r3, [r2, #0]
	100: HCLK divided by 2  (Required to make APB2 Bus frequency 16 MHZ)
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16 */
	//RCC_CFGR |= 0b101 << 11;          // Method 1
	R_RCC_CFGR->field.PPRE2 = 0b100;    // Method 2
 80001c2:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <CLK_setConfig+0x68>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	6813      	ldr	r3, [r2, #0]
 80001c8:	2104      	movs	r1, #4
 80001ca:	f361 23cd 	bfi	r3, r1, #11, #3
 80001ce:	6013      	str	r3, [r2, #0]
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000008 	.word	0x20000008
 80001dc:	20000004 	.word	0x20000004

080001e0 <main>:
/********************************************************
 * @brief  The application entry point.
 * @retval int
 ********************************************************/
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	volatile uint32 i; // Loop Iterator

	/* Configure clock settings */
	CLK_setConfig();
 80001e6:	f7ff ffc3 	bl	8000170 <CLK_setConfig>

	/* Enable clock for GPIOA (PORTA) */
	SET_BIT(RCC_APB2ENR, RCC_IOPAEN);
 80001ea:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <main+0x74>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <main+0x74>)
 80001f0:	f043 0304 	orr.w	r3, r3, #4
 80001f4:	6013      	str	r3, [r2, #0]

	/* Configure Pin 13 of GPIOA as an output (mode = 2) */
	GPIOA_CRH &= 0xFF0FFFFF; // Clear bits from bit20 to bit23
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <main+0x78>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a17      	ldr	r2, [pc, #92]	; (8000258 <main+0x78>)
 80001fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000200:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000; // Set bits from bit20 to bit23 with value 2
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <main+0x78>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a14      	ldr	r2, [pc, #80]	; (8000258 <main+0x78>)
 8000208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800020c:	6013      	str	r3, [r2, #0]

	while(1)
	{
		R_ODR->Pin.P_13 = 1;           /* Set Pin 13 */
 800020e:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x7c>)
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	6813      	ldr	r3, [r2, #0]
 8000214:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000218:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <main+0x46>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f241 3287 	movw	r2, #4999	; 0x1387
 800022c:	4293      	cmp	r3, r2
 800022e:	d9f7      	bls.n	8000220 <main+0x40>
		R_ODR->Pin.P_13 = 0;           /* Clear Pin 13 */
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x7c>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	6813      	ldr	r3, [r2, #0]
 8000236:	f36f 334d 	bfc	r3, #13, #1
 800023a:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++);
 800023c:	2300      	movs	r3, #0
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	e002      	b.n	8000248 <main+0x68>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3301      	adds	r3, #1
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f241 3287 	movw	r2, #4999	; 0x1387
 800024e:	4293      	cmp	r3, r2
 8000250:	d9f7      	bls.n	8000242 <main+0x62>
		R_ODR->Pin.P_13 = 1;           /* Set Pin 13 */
 8000252:	e7dc      	b.n	800020e <main+0x2e>
 8000254:	40021018 	.word	0x40021018
 8000258:	40010804 	.word	0x40010804
 800025c:	20000000 	.word	0x20000000

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	; (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	; (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ffa5 	bl	80001e0 <main>

08000296 <LoopForever>:

LoopForever:
    b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80002ac:	20000028 	.word	0x20000028

080002b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC1_2_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	2500      	movs	r5, #0
 80002b8:	4e0c      	ldr	r6, [pc, #48]	; (80002ec <__libc_init_array+0x38>)
 80002ba:	4c0d      	ldr	r4, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002bc:	1ba4      	subs	r4, r4, r6
 80002be:	10a4      	asrs	r4, r4, #2
 80002c0:	42a5      	cmp	r5, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	f000 f81a 	bl	80002fc <_init>
 80002c8:	2500      	movs	r5, #0
 80002ca:	4e0a      	ldr	r6, [pc, #40]	; (80002f4 <__libc_init_array+0x40>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <__libc_init_array+0x44>)
 80002ce:	1ba4      	subs	r4, r4, r6
 80002d0:	10a4      	asrs	r4, r4, #2
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002dc:	4798      	blx	r3
 80002de:	3501      	adds	r5, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e6:	4798      	blx	r3
 80002e8:	3501      	adds	r5, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
