
Toggle_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000164  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000270  08000278  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000270  08000270  00010278  2**0
                  CONTENTS
  4 .ARM          00000000  08000270  08000270  00010278  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000270  08000278  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000270  08000270  00010270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000274  08000274  00010274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000278  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000278  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000ee  00000000  00000000  000102a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000008b  00000000  00000000  0001038f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000b08  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000108  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002f7f  00000000  00000000  000110a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00014027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000140a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000258 	.word	0x08000258

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000258 	.word	0x08000258

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	SET_BIT(RCC_APB2ENR,RCC_IOPAEN);
 8000152:	4b1a      	ldr	r3, [pc, #104]	; (80001bc <main+0x70>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a19      	ldr	r2, [pc, #100]	; (80001bc <main+0x70>)
 8000158:	f043 0304 	orr.w	r3, r3, #4
 800015c:	6013      	str	r3, [r2, #0]
	GPIOA_CRH &= 0xFF0FFFFF;           // Clear bits from bit20 to bit23
 800015e:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <main+0x74>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	4a17      	ldr	r2, [pc, #92]	; (80001c0 <main+0x74>)
 8000164:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000168:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;           // Set bits from bit20 to bit23 with value 2
 800016a:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <main+0x74>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a14      	ldr	r2, [pc, #80]	; (80001c0 <main+0x74>)
 8000170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000174:	6013      	str	r3, [r2, #0]

	CLEAR_BIT(GPIOA_ODR,PIN_13);       // Initially LED is OFF
 8000176:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <main+0x78>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <main+0x78>)
 800017c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000180:	6013      	str	r3, [r2, #0]
	while(1)
	{
		for(uint32 i = 0; i < 5000; i++);
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
 8000186:	e002      	b.n	800018e <main+0x42>
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	3301      	adds	r3, #1
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f241 3287 	movw	r2, #4999	; 0x1387
 8000194:	4293      	cmp	r3, r2
 8000196:	d9f7      	bls.n	8000188 <main+0x3c>
		TOGGLE_BIT(GPIOA_ODR,PIN_13);   // Toggle LED
 8000198:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x78>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a09      	ldr	r2, [pc, #36]	; (80001c4 <main+0x78>)
 800019e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001a2:	6013      	str	r3, [r2, #0]
		for(uint32 i = 0; i < 5000; i++);
 80001a4:	2300      	movs	r3, #0
 80001a6:	603b      	str	r3, [r7, #0]
 80001a8:	e002      	b.n	80001b0 <main+0x64>
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	603b      	str	r3, [r7, #0]
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80001b6:	4293      	cmp	r3, r2
 80001b8:	d9f7      	bls.n	80001aa <main+0x5e>
		for(uint32 i = 0; i < 5000; i++);
 80001ba:	e7e2      	b.n	8000182 <main+0x36>
 80001bc:	40021018 	.word	0x40021018
 80001c0:	40010804 	.word	0x40010804
 80001c4:	4001080c 	.word	0x4001080c

080001c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001c8:	480b      	ldr	r0, [pc, #44]	; (80001f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001ca:	490c      	ldr	r1, [pc, #48]	; (80001fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001cc:	4a0c      	ldr	r2, [pc, #48]	; (8000200 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d0:	e002      	b.n	80001d8 <LoopCopyDataInit>

080001d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001d6:	3304      	adds	r3, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001dc:	d3f9      	bcc.n	80001d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001de:	4a09      	ldr	r2, [pc, #36]	; (8000204 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001e0:	4c09      	ldr	r4, [pc, #36]	; (8000208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e4:	e001      	b.n	80001ea <LoopFillZerobss>

080001e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001e8:	3204      	adds	r2, #4

080001ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001ec:	d3fb      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
//    bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 80001ee:	f000 f80f 	bl	8000210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001f2:	f7ff ffab 	bl	800014c <main>
  bx lr
 80001f6:	4770      	bx	lr
  ldr r0, =_sdata
 80001f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000200:	08000278 	.word	0x08000278
  ldr r2, =_sbss
 8000204:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000208:	2000001c 	.word	0x2000001c

0800020c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800020c:	e7fe      	b.n	800020c <ADC1_2_IRQHandler>
	...

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	2500      	movs	r5, #0
 8000214:	4e0c      	ldr	r6, [pc, #48]	; (8000248 <__libc_init_array+0x38>)
 8000216:	4c0d      	ldr	r4, [pc, #52]	; (800024c <__libc_init_array+0x3c>)
 8000218:	1ba4      	subs	r4, r4, r6
 800021a:	10a4      	asrs	r4, r4, #2
 800021c:	42a5      	cmp	r5, r4
 800021e:	d109      	bne.n	8000234 <__libc_init_array+0x24>
 8000220:	f000 f81a 	bl	8000258 <_init>
 8000224:	2500      	movs	r5, #0
 8000226:	4e0a      	ldr	r6, [pc, #40]	; (8000250 <__libc_init_array+0x40>)
 8000228:	4c0a      	ldr	r4, [pc, #40]	; (8000254 <__libc_init_array+0x44>)
 800022a:	1ba4      	subs	r4, r4, r6
 800022c:	10a4      	asrs	r4, r4, #2
 800022e:	42a5      	cmp	r5, r4
 8000230:	d105      	bne.n	800023e <__libc_init_array+0x2e>
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000238:	4798      	blx	r3
 800023a:	3501      	adds	r5, #1
 800023c:	e7ee      	b.n	800021c <__libc_init_array+0xc>
 800023e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000242:	4798      	blx	r3
 8000244:	3501      	adds	r5, #1
 8000246:	e7f2      	b.n	800022e <__libc_init_array+0x1e>
 8000248:	08000270 	.word	0x08000270
 800024c:	08000270 	.word	0x08000270
 8000250:	08000270 	.word	0x08000270
 8000254:	08000274 	.word	0x08000274

08000258 <_init>:
 8000258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800025a:	bf00      	nop
 800025c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025e:	bc08      	pop	{r3}
 8000260:	469e      	mov	lr, r3
 8000262:	4770      	bx	lr

08000264 <_fini>:
 8000264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000266:	bf00      	nop
 8000268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026a:	bc08      	pop	{r3}
 800026c:	469e      	mov	lr, r3
 800026e:	4770      	bx	lr
